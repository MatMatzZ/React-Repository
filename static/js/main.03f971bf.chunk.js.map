{"version":3,"sources":["logo.svg","components/Counter.js","components/Welcome.js","components/Message.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Counter","Component","props","state","count","this","setState","onClick","increment","decrement","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+JAAAA,EAAOC,QAAU,IAA0B,kC,8HC+B5BC,G,YC7BOC,YCAAA,Y,kDFClB,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAEDC,MAAQ,CACRC,MAAM,GAJI,E,wDAQfC,KAAKC,SAAS,CACVF,MAAOC,KAAKF,MAAMC,OAAO,M,kCAI7BC,KAAKC,SAAS,CACVF,MAAOC,KAAKF,MAAMC,OAAO,M,+BAGvB,IAAD,OACL,OACI,6BACI,wCAAcC,KAAKF,MAAMC,OACzB,4BAAQG,QAAS,kBAAI,EAAKC,cAA1B,aACA,4BAAQD,QAAS,kBAAI,EAAKE,cAA1B,kB,GAvBMR,cGkCPS,E,uKA1BX,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,W,GAJUV,aCIEW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.03f971bf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React, { Component } from 'react'\r\n\r\nclass Counter extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n    \r\n        this.state = {\r\n             count:0\r\n        }\r\n    }\r\n    increment(){\r\n        this.setState({\r\n            count: this.state.count+=1\r\n        })\r\n    }\r\n    decrement(){\r\n        this.setState({\r\n            count: this.state.count-=1\r\n        })\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div>Count - {this.state.count}</div>\r\n                <button onClick={()=>this.increment()}>Increment</button>\r\n                <button onClick={()=>this.decrement()}>Decrement</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Counter\r\n","import React, {Component} from 'react'\r\n\r\nclass Welcome extends Component {\r\n    render() {\r\n    return <h1>Welcome {this.props.name} a.k.a {this.props.heroName}</h1>\r\n    }\r\n}\r\n\r\nexport default Welcome","import React, {Component} from 'react'\r\n\r\nclass Message extends Component {\r\n    constructor(){\r\n        super()\r\n        this.state = {\r\n            message: 'Welcome visitor'\r\n        }\r\n    }\r\n    changeMessage(){\r\n        this.setState({\r\n            message: 'Thank you for subscribing!'\r\n        })\r\n    }\r\n    render() {\r\n        return(\r\n            <div>\r\n                <h1>{this.state.message}</h1>\r\n                <button onClick={()=>this.changeMessage()}>Subscribe</button>\r\n            </div>\r\n        ) \r\n    }\r\n}\r\n\r\nexport default Message","import React, { Component } from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport Greet from './components/Greet'\r\nimport Welcome from './components/Welcome'\r\nimport Message from './components/Message'\r\nimport Counter from './components/Counter';\r\n\r\nclass App extends Component {\r\n  render(){\r\n    return (\r\n      <div className=\"App\">\r\n        <Counter></Counter>\r\n        {/* <Message/> */}\r\n  \r\n        {/* <h1>Functional Statement</h1>\r\n        <hr></hr>\r\n        <Greet name =\"Bruce\" heroName=\"Batman\">\r\n          <p>I am dark knight</p>\r\n        </Greet>\r\n        <Greet name =\"Clark\" heroName= \"Superman\">\r\n          <button>Click me</button>\r\n        </Greet>\r\n        <Greet name =\"Diana\" heroName= \"Wonderwoman\"/>\r\n        <hr></hr>\r\n        <h1>Class Statement</h1>\r\n        <hr></hr>\r\n        <Welcome name =\"Bruce\" heroName=\"Batman\"/>\r\n        <Welcome name =\"Clark\" heroName= \"Superman\"/>\r\n        <Welcome name =\"Diana\" heroName= \"Wonderwoman\"/> */}\r\n      </div>\r\n    );\r\n  }\r\n  }\r\n  \r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}